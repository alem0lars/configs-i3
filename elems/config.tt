# ─────────────────────────────────────────────────────────────────────────────┐
#                                                                              │
# Name:    elems/config.tt                                                     │
# Summary: i3 configuration.                                                   │
# Authors:                                                                     │
#   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)              │
#                                                                              │
# Project:                                                                     │
#   - Homepage:        https://github.com/alem0lars/configs-i3                 │
#   - Getting started: see README.md in the project root folder                │
#                                                                              │
# License: Apache v2.0 (see below)                                             │
#                                                                              │
# ─────────────────────────────────────────────────────────────────────────────┤
#                                                                              │
# Licensed to the Apache Software Foundation (ASF) under one more contributor  │
# license agreements.  See the NOTICE file distributed with this work for      │
# additional information regarding copyright ownership. The ASF licenses this  │
# file to you under the Apache License, Version 2.0 (the "License"); you may   │
# not use this file except in compliance with the License.                     │
# You may obtain a copy of the License at                                      │
#                                                                              │
#   http://www.apache.org/licenses/LICENSE-2.0                                 │
#                                                                              │
# Unless required by applicable law or agreed to in writing, software          │
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT    │
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.             │
# See the License for the specific language governing permissions and          │
# limitations under the License.                                               │
#                                                                              │
# ─────────────────────────────────────────────────────────────────────────────┤
<%
  define_locals do
    variable "hidpi", as: :hidpi
    variable "i3.mod_key", as: :mod_key
    variable "i3.colorscheme", as: :colorscheme
    variable "i3.terminal", as: :terminal
    variable "i3.terminal_no_multiplexer", as: :terminal_no_multiplexer
    variable "i3.startup_cmd", as: :startup_cmd
    variable "i3.xkill_cmd", as: :xkill_cmd
    variable "i3.launcher_cmd", as: :launcher_cmd
    variable "i3.window_chooser_cmd", as: :window_chooser_cmd
    variable "i3.calc_cmd", as: :calc_cmd
    variable "i3.brightness_inc_cmd", as: :brightness_inc_cmd
    variable "i3.brightness_dec_cmd", as: :brightness_dec_cmd

    variable "font.name", as: :font_name
    variable "font.size", as: :font_size

    variable "pulseaudio.default_sink", as: :pa_sink
  end

  def exec_and_notify(msg, cmd, notify_after: true)
    msg = msg.call if msg.respond_to? :call

    notify_cmd = "exec notify-send '#{msg}'"
    exec_cmd = "exec #{cmd}"

    if notify_after
      [exec_cmd, notify_cmd]
    else
      [notify_cmd, exec_cmd]
    end.join("; ")
  end

  def colorscheme_for_class(name)
    data = local!(:colorscheme)[name]
    [
      data[:border],
      data[:bg],
      data[:fg],
      data[:indicator],
      data[:child_border]
    ].join(" ")
  end

  def scale(size)
    if local! :hidpi
      size * 2
    else
      size
    end
  end
%>
# ─────────────────────────────────────────────────────────────────────────────┘


# ───────────────────────────────────────────────────────────────── Variables ──

# Set modifier key
set $mod <%= local! :mod_key %>

# Set font
set $font pango:<%= local! :font_name %> <%= local! :font_size %>

# ─────────────────────────────────────────────────────────────────── Startup ──

# Execute command on i3 startup (excluding restarts)
<% if local? :startup_cmd %>
exec "<%= local! :startup_cmd %>"
<% end %>

# ─────────────────────────────────────────────────────────────────── Layouts ──

# Default workspace layout
workspace_layout tabbed

# Default orientation for new workspaces
default_orientation auto

# When a application is in fullscreen mode and some applications open popup
# windows, display the popup if it belongs to the fullscreen application only
popup_during_fullscreen smart

# When being in a tabbed or stacked container, the first container will be
# focused when you use focus down on the last container, the focus wraps. If
# however there is another stacked/tabbed container in that direction, focus
# will be set on that container (so you can navigate to all your windows without
# having to use focus parent)
force_focus_wrapping no

# Don't force xinerama
force_xinerama no

# Switching multiple times on the same workspace doesn't do anything
workspace_auto_back_and_forth no

# Delay resetting the urgency state to be able to know better which window
# originally raised the event
force_display_urgency_hint 512 ms

# If the window requesting focus is on an active workspace, it will receive the
# focus; otherwise, the urgency hint will be set
focus_on_window_activation smart

# ─────────────────────────────────────────────────────────────────── X rules ──

# Set windows that should be floating by default
for_window [class="^Pavucontrol$"] floating enable
for_window [class="^copyq$"]       floating enable
for_window [class="^SpeedCrunch"]  floating enable
for_window [class="^DevDocs$"]     floating enable, resize set <%= scale 1152 %> <%= scale 648 %>
for_window [class="^Toggl Desktop$"] floating enable

# Make all floating windows centered
for_window [class=".*"] move position center

# Assign windows to particular workspaces
assign [class="^Firefox$"]                   → 1
assign [class="^chromium-browser-chromium$"] → 1
assign [class="^trello"]                     → 5
assign [class="^Dynalist"]                   → 5
assign [class="^toggl"]                      → 5
assign [class="^notion"]                     → 5
assign [class="^Todoist"]                    → 5
assign [class="^whatsapp"]                   → 6
assign [class="^TelegramDesktop$"]           → 6
assign [class="^Caprine"]                    → 6
assign [class="^skypeforlinux$"]             → 6
assign [class="^Slack$"]                     → 6
assign [class="^Thunderbird$"]               → 6
assign [class="^Mumble$"]                    → 6
assign [class="^Skype$"]                     → 6
assign [class="^Spotify$"]                   → 7
assign [class="^Transmission-gtk$"]          → 9
assign [class="^VirtualBox"]                 → 10
assign [class="^VMware Workstation$"]        → 10
assign [class="^Virt-manager$"]              → 10
assign [class="^Qemu-system-arm$"]           → 10

# ─────────────────────────────────────────────────────────────────────── Bar ──

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
  # ─────────────────────────────────────────────────────────── Generic ← Bar ──

  status_command py3status

  # ───────────────────────────────────────────────────────────── Items ← Bar ──

  # Show workspace buttons
  workspace_buttons yes

  # Don't show numbers if workspace name is available
  strip_workspace_numbers yes

  # Show binding mode indicator
  binding_mode_indicator yes

  # ─────────────────────────────────────────────────────── Positioning ← Bar ──

  # Which screen the tray icons should be displayed
  tray_output primary

  # Bar position
  position top

  # How bar should be shown
  mode dock

  # ──────────────────────────────────────────────────────── Appearance ← Bar ──

  # Font
  font $font

  # Spacing between each tray icon
  tray_padding 4 px

  # Separator symbol
  separator_symbol "│"

  # Colors
  colors {
    background #202020
    statusline #aaaaaa
    separator #000000

    # class            border   background  text
    focused_workspace  #4c7899  #285577     #ffffff
    active_workspace   #333333  #5f676a     #ffffff
    inactive_workspace #333333  #222222     #888888
    urgent_workspace   #2f343a  #900000     #ffffff
    binding_mode       #2f343a  #900000     #ffffff
  }
}

# ──────────────────────────────────────────────────────────────── Appearance ──

# Font for window titles (will also be used by the bar unless a different font
# is used in the bar)
font $font

# Hide container borders on workspaces with only one window visible
hide_edge_borders smart

# Enable window decorations
show_marks yes

# Colors
client.background       <%= local!(:colorscheme)[:bg] %>
client.focused          <%= colorscheme_for_class :focused %>
client.focused_inactive <%= colorscheme_for_class :focused_inactive %>
client.unfocused        <%= colorscheme_for_class :unfocused %>
client.urgent           <%= colorscheme_for_class :urgent %>
client.placeholder      <%= colorscheme_for_class :placeholder %>

# ───────────────────────────────────────────────────────────────────── Mouse ──

# Prevent focus from following mouse
focus_follows_mouse no

# When switching focus to a window on a different screen, disable mouse warping
mouse_warping none

# ─────────────────────────────────────────────────────────────── Keybindings ──

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# Start a terminal
# => with terminal multiplexer
bindsym $mod+Return exec "<%= local! :terminal %>"
# => without terminal multiplexer
bindsym $mod+Shift+Return exec "<%= local! :terminal_no_multiplexer %>"

# Kill focused window
bindsym $mod+Shift+c kill
# Prompt to kill X window
bindsym $mod+Shift+Alt+c exec "<%= local! :xkill_cmd %>"

# Start program launcher
bindsym $mod+p exec "<%= local! :launcher_cmd %>"
# Start window chooser
bindsym $mod+Tab exec "<%= local! :window_chooser_cmd %>"

# Reload the configuration file
bindsym $mod+Shift+r reload

# Restart i3 inplace (preserves layout/session)
bindsym $mod+q restart

# Exit i3 (logout of X session)
bindsym $mod+Shift+q exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# Toggle sticky on focused window
bindsym $mod+s sticky toggle

# Change focus
# => with vi keys
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right
# => with cursor keys
bindsym $mod+Left  focus left
bindsym $mod+Down  focus down
bindsym $mod+Up    focus up
bindsym $mod+Right focus right

# Move focused window
# => with vi keys
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right
# => with cursor keys
bindsym $mod+Shift+Left  move left
bindsym $mod+Shift+Down  move down
bindsym $mod+Shift+Up    move up
bindsym $mod+Shift+Right move right

# Move to screen
# => with vi keys
bindsym $mod+Control+h move workspace to output left
bindsym $mod+Control+j move workspace to output down
bindsym $mod+Control+k move workspace to output up
bindsym $mod+Control+l move workspace to output right
# => with cursor keys
bindsym $mod+Control+Left  move workspace to output left
bindsym $mod+Control+Down  move workspace to output down
bindsym $mod+Control+Up    move workspace to output up
bindsym $mod+Control+Right move workspace to output right

# Enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# Toggle tiling / floating
bindsym $mod+t floating toggle

# Change focus between tiling / floating windows
bindsym $mod+Shift+t focus mode_toggle

# Make the currently focused window a scratchpad
bindsym $mod+minus move scratchpad

# Show the first scratchpad window
bindsym $mod+grave scratchpad show

# Switch back and forth
bindsym $mod+a workspace back_and_forth

# Switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# Move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# Mode for window resizing
mode "resize" {
  # Pressing left will shrink the window’s width.
  # Pressing right will grow the window’s width.
  # Pressing up will shrink the window’s height.
  # Pressing down will grow the window’s height.
  bindsym j resize shrink width 10 px or 10 ppt
  bindsym k resize grow height 10 px or 10 ppt
  bindsym l resize shrink height 10 px or 10 ppt
  bindsym semicolon resize grow width 10 px or 10 ppt

  # same bindings, but for the arrow keys
  bindsym Left  resize shrink width  10 px or 10 ppt
  bindsym Down  resize grow   height 10 px or 10 ppt
  bindsym Up    resize shrink height 10 px or 10 ppt
  bindsym Right resize grow   width  10 px or 10 ppt

  # back to normal: Enter or Escape
  bindsym Return mode "default"
  bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

# Mode for advanced focus
mode "focus" {
  # Focus the parent container
  bindsym q focus parent

  # Focus the child container
  bindsym e focus child

  bindsym Escape mode "default"
  bindsym Return mode "default"
}
bindsym $mod+w mode "focus"

# Mode for changing layout
mode "layout" {
  # Change container layout
  # => toggle tabbed
  bindsym q layout tabbed
  # => toggle stacking
  bindsym w layout stacking
  # => toggle split vertical
  bindsym e layout splitv
  # => toggle split horizontal
  bindsym r layout splith
  # => toggle all
  bindsym d layout toggle all

  # Change orientation
  # => vertical
  bindsym a split v
  # => horizontal
  bindsym s split h

  bindsym Escape mode "default"
  bindsym Return mode "default"
}
bindsym $mod+d mode "layout"

# ───────────────────────────────────────────────────── Special ← Keybindings ──

# ────────────────────────────────────────────── Calc ← Special ← Keybindings ──

<% if local? :calc_cmd %>
bindsym XF86Calculator exec "<%= local! :calc_cmd %>"
<% end %>

# ───────────────────────────────────────────── Audio ← Special ← Keybindings ──

<% if local? :pa_sink %>

bindsym XF86AudioLowerVolume <%= exec_and_notify(
  "Decreasing audio volume",
  "pactl set-sink-volume #{local! :pa_sink} -5%"
) %>

bindsym XF86AudioRaiseVolume <%= exec_and_notify(
  "Increasing audio volume",
  "pactl set-sink-volume #{local! :pa_sink} +5%"
) %>

bindsym XF86AudioMute <%= exec_and_notify(
  "Toggling audio mute",
  "pactl set-sink-mute #{local! :pa_sink} toggle"
) %>

<% end %>

# ─────────────────────────────────────── MediaPlayer ← Special ← Keybindings ──

bindsym XF86AudioPlay <%= exec_and_notify(
  "Toggling media play/pause",
  "playerctl play-pause"
) %>

bindsym XF86AudioPrev <%= exec_and_notify(
  "Playing previous track",
  "playerctl previous"
) %>

bindsym XF86AudioNext <%= exec_and_notify(
  "Playing next track",
  "playerctl next"
) %>

# ──────────────────────────────────────── Brightness ← Special ← Keybindings ──

# Increase screen brightness
<% if local? :brightness_inc_cmd %>
bindsym XF86MonBrightnessUp <%= exec_and_notify(
  "Increasing brightness level",
  local!(:brightness_inc_cmd)
) %>
<% end %>

# Decrease screen brightness
<% if local? :brightness_dec_cmd %>
bindsym XF86MonBrightnessDown <%= exec_and_notify(
  "Decreasing brightness level",
  local!(:brightness_dec_cmd)
) %>
<% end %>

#   -- ───────────────────────────────────────── keyboard •2.09.08• ──┤
# , ( (metaMask, xK_F2)
#   , spawnAndNotify "setxkbmap <\%= local! :kb_layout_main %>"
#                    "keyboard layout changed back to main: <\%= local! :kb_layout_main %>"
#   , "Change keyboard layout back to main " ++
#     "(<\%= local! :kb_layout_main %>)"
#   )
# , ( (metaMask .|. shiftMask, xK_F2)
#   , spawnAndNotify "setxkbmap <\%= local! :kb_layout_alt %>"
#                    "keyboard layout changed to alternative: <\%= local! :kb_layout_alt %>"
#   , "Change keyboard layout to alternative " ++
#     "(<\%= local! :kb_layout_alt %>)"
#   )
#   -- ──────────────────────────────────── notifications •2.09.09• ──┤
# , ( (metaMask, xK_F3)
#   , spawnAndNotify "dunstctl --cmd resume" "resuming notifications"
#   , "Resume notifications"
#   )
# , ( (metaMask .|. shiftMask, xK_F3)
#   , spawnAndNotify "sleep 3; dunstctl --cmd pause" "pausing notifications"
#   , "Pause notifications"
#   )
#   -- ───────────────────────────────────────────── lock •2.09.10• ──┤
# , ( (metaMask, xK_F4)
#   , spawnAndNotify "sleep 3; slock" "locking screen"
#   , "Lock screen"
#   )
# , ( (metaMask .|. shiftMask, xK_F4)
#   , spawnAndNotify "sleep 3; systemctl suspend; slock" "suspending"
#   , "Suspend in RAM (and lock screen)"
#   )


# vim: set filetype=eruby.conf :
